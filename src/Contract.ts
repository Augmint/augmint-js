import { Web3 } from "web3";
import { Web3Contract } from "web3-eth-contract";
import { EthereumConnection } from "./EthereumConnection";
import { connectLatest } from "./utils/contractConnection";
import { AbiniserAbi } from "./utils/EthereumAbi";

/**
 * Abstract Contract super class
 */
export abstract class Contract {
    public ethereumConnection: EthereumConnection;
    public web3: Web3;
    public instance: Web3Contract;

    get address(): string {
        return this.instance ? this.instance._address : null;
    }

    /**
     * connects to latest deployment or if address provided then  at that address
     * NB: connect by address is not implemented tyet
     * @param  {object}  ethereumConnection a connected EthereumConnection instance
     * @param  {string}  abiFile            path to the JSON abifile generated by abiniser
     * @param  {string}  address            contract address if y (not yet implemented)
     * @return {Promise}                    the web3 contract instance
     */
    public async connect(
        ethereumConnection: EthereumConnection,
        abiFile: AbiniserAbi,
        address?: string
    ): Promise<Web3Contract> {
        if (address) {
            throw new Error(
                "Connecting to a contract at arbitary address is not supported yet. Pass no address to connect latest contract deployment at network"
            );
        }

        if (!(await ethereumConnection.isConnected())) {
            throw new Error(
                "Contract: not connected to web3 at passed ethereumConnection. call ethereumConnection.connect first"
            );
        }

        this.ethereumConnection = ethereumConnection;
        this.web3 = this.ethereumConnection.web3;

        this.instance = connectLatest(this.ethereumConnection, abiFile);

        return this.instance;
    }
}
