const contractConnection = require("./utils/contractConnection.js");

/**
 * Generic Contract super class
 */
class Contract {
    constructor() {
        /**
         * @prop    {object}   ethereumConnection the EthereumConnection instance this contract instance is connected to
         * @prop    {object}   web3 shorthand for ethereumConnection.web3
         * @prop    {string}   [address]  Ethereum address of the contract instance
         */
        this.ethereumConnection = null;
        this.web3 = null;
        this.instance = null;
    }

    get address() {
        return this.instance ? this.instance._address : null;
    }

    /**
     * connects to latest deployment or if address provided then  at that address
     * NB: connect by address is not implemented tyet
     * @param  {object}  ethereumConnection a connected EthereumConnection instance
     * @param  {string}  abiFile            path to the JSON abifile generated by abiniser
     * @param  {string}  address            contract address if y (not yet implemented)
     * @return {Promise}                    the web3 contract instance
     */
    async connect(ethereumConnection, abiFile, address) {
        if (address) {
            throw new Error(
                "Connecting to a contract at arbitary address is not supported yet. Pass no address to connect latest contract deployment at network"
            );
        }

        if (!(await ethereumConnection.isConnected())) {
            throw new Error(
                "Contract: not connected to web3 at passed ethereumConnection. call ethereumConnection.connect first"
            );
        }

        this.ethereumConnection = ethereumConnection;
        this.web3 = this.ethereumConnection.web3;

        this.instance = contractConnection.connectLatest(this.ethereumConnection, abiFile);

        return this.instance;
    }
}

module.exports = Contract;
