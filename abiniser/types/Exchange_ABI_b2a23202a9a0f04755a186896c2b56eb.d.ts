/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class Exchange_ABI_b2a23202a9a0f04755a186896c2b56eb extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions);
    methods: {
        buyTokenOrders(
            arg0: number | string
        ): TransactionObject<{
            index: string;
            maker: string;
            price: string;
            amount: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;

        permissions(arg0: string, arg1: string | number[]): TransactionObject<boolean>;

        sellTokenOrders(
            arg0: number | string
        ): TransactionObject<{
            index: string;
            maker: string;
            price: string;
            amount: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;

        getActiveOrderCounts(): TransactionObject<{
            buyTokenOrderCount: string;
            sellTokenOrderCount: string;
            0: string;
            1: string;
        }>;

        getActiveBuyOrders(offset: number | string): TransactionObject<((string)[])[]>;

        getActiveSellOrders(offset: number | string): TransactionObject<((string)[])[]>;

        revokePermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        revokeMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantPermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        setRatesContract(newRatesContract: string): TransactionObject<void>;

        placeBuyTokenOrder(price: number | string): TransactionObject<string>;

        placeSellTokenOrder(price: number | string, tokenAmount: number | string): TransactionObject<string>;

        transferNotification(
            maker: string,
            tokenAmount: number | string,
            price: number | string
        ): TransactionObject<void>;

        cancelBuyTokenOrder(buyTokenId: number | string): TransactionObject<void>;

        cancelSellTokenOrder(sellTokenId: number | string): TransactionObject<void>;

        matchOrders(buyTokenId: number | string, sellTokenId: number | string): TransactionObject<void>;

        matchMultipleOrders(
            buyTokenIds: (number | string)[],
            sellTokenIds: (number | string)[]
        ): TransactionObject<string>;

        orderCount(): TransactionObject<string>;
        rates(): TransactionObject<string>;
        augmintToken(): TransactionObject<string>;
        CHUNK_SIZE(): TransactionObject<string>;
    };
    events: {
        NewOrder(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        OrderFill(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        CancelledOrder(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        RatesContractChanged(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionGranted(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionRevoked(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        allEvents: (
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ) => EventEmitter;
    };
}
