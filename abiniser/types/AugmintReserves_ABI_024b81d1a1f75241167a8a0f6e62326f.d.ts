/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class AugmintReserves_ABI_024b81d1a1f75241167a8a0f6e62326f extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions);
    methods: {
        permissions(arg0: string, arg1: string | number[]): TransactionObject<boolean>;

        revokePermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        revokeMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantPermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        burn(augmintToken: string, amount: number | string): TransactionObject<void>;

        migrate(to: string, weiAmount: number | string): TransactionObject<void>;
    };
    events: {
        ReserveMigration(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionGranted(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionRevoked(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        allEvents: (
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ) => EventEmitter;
    };
}
