/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class MonetarySupervisor_ABI_54d27fedd8bf3010ad5509866a42c053 extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions);
    methods: {
        ltdParams(): TransactionObject<{
            lockDifferenceLimit: string;
            loanDifferenceLimit: string;
            allowedDifferenceAmount: string;
            0: string;
            1: string;
            2: string;
        }>;

        permissions(arg0: string, arg1: string | number[]): TransactionObject<boolean>;

        acceptedLegacyAugmintTokens(arg0: string): TransactionObject<boolean>;

        getMaxLockAmount(minLockAmount: number | string, interestPt: number | string): TransactionObject<string>;

        getMaxLoanAmount(minLoanAmount: number | string): TransactionObject<string>;

        revokePermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        revokeMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantPermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        issueToReserve(amount: number | string): TransactionObject<void>;

        burnFromReserve(amount: number | string): TransactionObject<void>;

        requestInterest(amountToLock: number | string, interestAmount: number | string): TransactionObject<void>;

        releaseFundsNotification(lockedAmount: number | string): TransactionObject<void>;

        issueLoan(borrower: string, loanAmount: number | string): TransactionObject<void>;

        loanRepaymentNotification(loanAmount: number | string): TransactionObject<void>;

        loanCollectionNotification(totalLoanAmountCollected: number | string): TransactionObject<void>;

        setAcceptedLegacyAugmintToken(
            legacyAugmintTokenAddress: string,
            newAcceptedState: boolean
        ): TransactionObject<void>;

        setLtdParams(
            lockDifferenceLimit: number | string,
            loanDifferenceLimit: number | string,
            allowedDifferenceAmount: number | string
        ): TransactionObject<void>;

        adjustKPIs(
            totalLoanAmountAdjustment: number | string,
            totalLockedAmountAdjustment: number | string
        ): TransactionObject<void>;

        setSystemContracts(newInterestEarnedAccount: string, newAugmintReserves: string): TransactionObject<void>;

        transferNotification(from: string, amount: number | string, arg2: number | string): TransactionObject<void>;

        totalLockedAmount(): TransactionObject<string>;
        totalLoanAmount(): TransactionObject<string>;
        interestEarnedAccount(): TransactionObject<string>;
        issuedByStabilityBoard(): TransactionObject<string>;
        augmintToken(): TransactionObject<string>;
        PERCENT_100(): TransactionObject<string>;
        augmintReserves(): TransactionObject<string>;
        getLoanToDepositRatio(): TransactionObject<string>;
        getMaxLockAmountAllowedByLtd(): TransactionObject<string>;
        getMaxLoanAmountAllowedByLtd(): TransactionObject<string>;
    };
    events: {
        LtdParamsChanged(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        AcceptedLegacyAugmintTokenChanged(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        LegacyTokenConverted(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        KPIsAdjusted(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        SystemContractsChanged(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionGranted(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionRevoked(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        allEvents: (
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ) => EventEmitter;
    };
}
