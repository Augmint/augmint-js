/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class TokenAEur_ABI_9aa81519ec45a52d3f8f1a1a83d25c74 extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions);
    methods: {
        balances(arg0: string): TransactionObject<string>;

        permissions(arg0: string, arg1: string | number[]): TransactionObject<boolean>;

        allowed(arg0: string, arg1: string): TransactionObject<string>;

        balanceOf(_owner: string): TransactionObject<string>;

        allowance(_owner: string, _spender: string): TransactionObject<string>;

        delegatedTxHashesUsed(arg0: string | number[]): TransactionObject<boolean>;

        approve(_spender: string, amount: number | string): TransactionObject<boolean>;

        transferAndNotify(target: string, amount: number | string, data: number | string): TransactionObject<void>;

        issueTo(to: string, amount: number | string): TransactionObject<void>;

        transferFrom(from: string, to: string, amount: number | string): TransactionObject<boolean>;

        burn(amount: number | string): TransactionObject<void>;

        setFeeAccount(newFeeAccount: string): TransactionObject<void>;

        revokePermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        decreaseApproval(_spender: string, _subtractedValue: number | string): TransactionObject<boolean>;

        transferFromWithNarrative(
            from: string,
            to: string,
            amount: number | string,
            narrative: string
        ): TransactionObject<void>;

        revokeMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        grantMultiplePermissions(agent: string, requiredPermissions: (string | number[])[]): TransactionObject<void>;

        transfer(to: string, amount: number | string): TransactionObject<boolean>;

        delegatedTransfer(
            from: string,
            to: string,
            amount: number | string,
            narrative: string,
            maxExecutorFeeInToken: number | string,
            nonce: string | number[],
            signature: (string | number[])[],
            requestedExecutorFeeInToken: number | string
        ): TransactionObject<void>;

        delegatedTransferAndNotify(
            from: string,
            target: string,
            amount: number | string,
            data: number | string,
            maxExecutorFeeInToken: number | string,
            nonce: string | number[],
            signature: (string | number[])[],
            requestedExecutorFeeInToken: number | string
        ): TransactionObject<void>;

        increaseApproval(_spender: string, _addedValue: number | string): TransactionObject<boolean>;

        grantPermission(agent: string, requiredPermission: string | number[]): TransactionObject<void>;

        transferWithNarrative(to: string, amount: number | string, narrative: string): TransactionObject<void>;

        name(): TransactionObject<string>;
        totalSupply(): TransactionObject<string>;
        decimals(): TransactionObject<string>;
        peggedSymbol(): TransactionObject<string>;
        stabilityBoardProxy(): TransactionObject<string>;
        feeAccount(): TransactionObject<string>;
        symbol(): TransactionObject<string>;
    };
    events: {
        FeeAccountChanged(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        TransferFeesChanged(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        Transfer(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        AugmintTransfer(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        TokenIssued(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        TokenBurned(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        Approval(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionGranted(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        PermissionRevoked(
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ): EventEmitter;

        allEvents: (
            options?: {
                filter?: object;
                fromBlock?: number | string;
                topics?: (null | string)[];
            },
            cb?: Callback<EventLog>
        ) => EventEmitter;
    };
}
